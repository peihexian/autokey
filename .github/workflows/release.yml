name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        default: "v1.0.0"

env:
  BUILD_TYPE: Release
  QT_VERSION: 5.15.2

jobs:
  create-release:
    runs-on: windows-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $version = "${{ github.event.inputs.version }}"
          } else {
            $version = "${{ github.ref_name }}"
          }
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "VERSION_NUMBER=$($version -replace '^v', '')" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: AutoKey for Diablo 3 ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## AutoKey for Diablo 3 ${{ steps.get_version.outputs.VERSION }}

            ### Features
            - ✅ **Fixed F5/F6 Global Hotkeys** - Now working perfectly across all applications
            - 🎮 Automated key pressing for Diablo 3
            - 👥 5 pre-configured character class profiles
            - ⚙️ Customizable key sequences and intervals
            - 🔥 Global hotkeys (F5 to start, F6 to stop)
            - 📱 System tray integration with custom icon
            - 💾 JSON configuration storage
            - 🎯 Action editor with keyboard capture

            ### Installation
            1. Download the ZIP file below
            2. Extract to a folder of your choice
            3. Run AutoKey.exe
            4. Configure your profiles and start gaming!

            ### System Requirements
            - Windows 10/11
            - Visual C++ Redistributable 2019/2022

            ### Usage
            - **F5**: Start auto-key simulation
            - **F6**: Stop auto-key simulation
            - Configure profiles in the main window
            - Minimize to system tray for background operation

            ### Notes
            - This tool is designed for legitimate gameplay enhancement
            - Ensure compliance with game terms of service
            - Global hotkeys work across all applications
          draft: false
          prerelease: false

  build-and-package:
    needs: create-release
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v1.3

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: windows
          target: desktop
          arch: win64_msvc2019_64
          cache: true
          cache-key-prefix: install-qt-action
          setup-python: false

      - name: Get version
        id: get_version
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $version = "${{ github.event.inputs.version }}"
          } else {
            $version = "${{ github.ref_name }}"
          }
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "VERSION_NUMBER=$($version -replace '^v', '')" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Configure CMake
        run: |
          $cmakeArgs = @(
          "-B", "${{github.workspace}}/build",
          "-DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}"
        )

        # Use Qt from jurplel/install-qt-action
        if ($env:Qt5_DIR) {
          $cmakeArgs += "-DCMAKE_PREFIX_PATH=${{env.Qt5_DIR}}"
          Write-Host "Using Qt from install-qt-action: ${{env.Qt5_DIR}}"
        }

        cmake @cmakeArgs
      shell: pwsh

      - name: Build
        run: |
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Package application
        run: |
          # Create distribution directory
          $distDir = "${{github.workspace}}/dist"
          New-Item -ItemType Directory -Path $distDir -Force | Out-Null

          # Copy main executable from Release directory
          Copy-Item "${{github.workspace}}/build/bin/Release/AutoKey.exe" $distDir

          # Copy configuration
          Copy-Item "${{github.workspace}}/config.json" $distDir

          # Copy documentation
          Copy-Item "${{github.workspace}}/README.md" $distDir

          # Copy icons directory
          Copy-Item "${{github.workspace}}/icons" $distDir -Recurse

          # Run windeployqt
          $qtBinDir = "${{env.Qt5_DIR}}/bin"
          $windeployqt = "$qtBinDir/windeployqt.exe"

          if (Test-Path $windeployqt) {
            Write-Host "Running windeployqt from: $windeployqt"
            & $windeployqt --release --no-translations --no-system-d3d-compiler --no-opengl-sw --dir $distDir "$distDir/AutoKey.exe"

            if ($LASTEXITCODE -ne 0) {
              Write-Warning "windeployqt failed with exit code $LASTEXITCODE"
            } else {
              Write-Host "windeployqt completed successfully"
            }
          } else {
            Write-Warning "windeployqt not found at $windeployqt"
            Write-Host "Available files in Qt bin directory:"
            if (Test-Path "$qtBinDir") {
              Get-ChildItem "$qtBinDir" | Select-Object Name | ForEach-Object { Write-Host "  $($_.Name)" }
            }
          }

          # Create version info
          $versionInfo = @"
          AutoKey for Diablo 3
          Version: ${{ steps.get_version.outputs.VERSION_NUMBER }}
          Build Date: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
          Build Type: Release

          System Requirements:
          - Windows 10/11
          - Visual C++ Redistributable 2019/2022

          Installation:
          1. Extract all files to a folder
          2. Run AutoKey.exe
          3. Configure your profiles in the application

          For support and updates, visit:
          https://github.com/${{ github.repository }}
          "@

          $versionInfo | Out-File -FilePath "$distDir/VERSION.txt" -Encoding UTF8

          # Create launch script
          $launchScript = @"
          @echo off
          cd /d "%~dp0"
          start AutoKey.exe
          "@

          $launchScript | Out-File -FilePath "$distDir/Launch AutoKey.bat" -Encoding ASCII

          # List files
          Write-Host "Packaged files:"
          Get-ChildItem $distDir -Recurse | ForEach-Object {
            $size = if ($_.PSIsContainer) { "DIR" } else { "$([math]::Round($_.Length / 1KB, 1)) KB" }
            Write-Host "  $($_.Name) ($size)"
          }
        shell: pwsh

      - name: Create ZIP archive
        run: |
          $zipPath = "${{github.workspace}}/AutoKey-${{ steps.get_version.outputs.VERSION_NUMBER }}-Windows.zip"
          Compress-Archive -Path "${{github.workspace}}/dist/*" -DestinationPath $zipPath -CompressionLevel Optimal

          $zipSize = [math]::Round((Get-Item $zipPath).Length / 1MB, 2)
          Write-Host "Created ZIP archive: $zipPath ($zipSize MB)"

          echo "ZIP_PATH=$zipPath" >> $env:GITHUB_ENV
          echo "ZIP_NAME=AutoKey-${{ steps.get_version.outputs.VERSION_NUMBER }}-Windows.zip" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          files: ${{ env.ZIP_PATH }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: autokey-release-${{ steps.get_version.outputs.VERSION_NUMBER }}
          path: |
            dist/
            ${{ env.ZIP_PATH }}
          retention-days: 30
